---
title: "PS4"
format:
  html:
    code-overflow: wrap
    embed-resources: true
    theme: simplex
---

## Problem 1

First, we install and load the package nzelect. I have commented off the line where I install the package so it wouldn't run again. I also load the tidyverse library
```{r}
# rm(list=ls())

# install.packages("nzelect")
library(nzelect)
data(nzge)

library(tidyverse)
```

a. Generate a table (which can just be a nicely printed tibble) of vote count (regardless of party) per year/type. Make sure to sort it by vote count.
```{r}
nzge %>%
  group_by(election_year, voting_type) %>%
  summarise(total_votes = sum(votes)) %>%
  arrange(-total_votes)
```

b. Focus only on the 2014 election. Report the proportion of votes for each party in the Candidate election. Again, produce a nice table and sort it by percent of vote. 
```{r}
nzge %>%
  filter(election_year == 2014, voting_type == "Candidate") %>%
  group_by(party) %>%
  summarise(total_votes = sum(votes)) %>%
  mutate(prop_votes = round(100*total_votes/sum(total_votes), 3)) %>%
  arrange(-prop_votes) %>%
  select(-total_votes)
```

c.Produce a nice table indicating, for each year, which party won the Candidate vote and which party won the Party vote.
```{r}
nzge %>%
  group_by(election_year, voting_type, party) %>%
  summarise(total_votes = sum(votes)) %>%
  group_by(election_year, voting_type) %>%
  filter(total_votes == max(total_votes)) %>%
  select(election_year, voting_type, party) %>%
  pivot_wider(names_from = voting_type, values_from = party)
```

## Problem 2

First, let's load the data.
``` {r}
atp_matches <- read.csv("data/atp_matches_2019.csv")
```

a. How many tournaments took place in 2019?

I noticed that some tourney's according to the tourney date, began in 2018, even though it's the very last day of 2018 (Dec 31, 2018), however, the tourney ID indicates that it is a 2019 tournament. I would assume that this may be because it took place in the 2019 tournament season. Using this approach, 128 tournaments took place in 2019. 
``` {r}
atp_matches %>%
  group_by(tourney_id) %>%
  summarise() %>%
  count()
```

Alternatively, by restricting the tourney date itself to only 2019, 125 tournaments took place in 2019.
``` {r}
atp_matches %>%
  mutate(tourney_date = as_date(as.character(tourney_date))) %>%
  filter(year(tourney_date) == 2019) %>%
  group_by(tourney_id) %>%
  summarise() %>%
  count()
```

b. Did any player win more than one tournament? If so, how many players won more than one tournament, and how many tournaments did the most winning player(s) win?
``` {r}
tournament_wins <- atp_matches %>%
  filter(round == "F") %>%
  group_by(winner_name) %>%
  summarise(tournament_wins = n()) %>%
  filter(tournament_wins > 1) %>%
  arrange(-tournament_wins)

tournament_wins
tournament_wins %>% count()
```
There are 12 players who won more than one tournament. Dominic Thiem and Novak Djokovic won the most tournaments with 5 tournament wins each.

c. Is there any evidence that winners have more aces than losers? (If you address this with a hypothesis test, do not use base R functionality - continue to remain in the Tidyverse.)

First off, let's extract just the data of the number of aces per round per winner or loser so that we can analyse it. Also, there are NA values in "w_ace" and "l_ace", but according to summary statistics, the value 0 exists, so these are likely actual NA values, so I will drop them.
``` {r}
aces <- atp_matches %>%
  select(w_ace, l_ace) %>%
  pivot_longer(cols = c("w_ace", "l_ace"),
               names_to = "w_l",
               values_to = "aces",
               values_drop_na = TRUE)
head(aces)
```

Next, we can get the summary statistics and perform a t-test with a tidy t-test.
``` {r}
aces %>%
  group_by(w_l) %>%
  summarise(mean = mean(aces),
            sd = sd(aces))

library(infer)
aces %>%
  t_test(aces ~ w_l, 
         alternative = "greater", 
         order = c("w_ace", "l_ace"))
```
According to the t-test, the p-value is very small, smaller than 0.05, hence it can be said that there is evidence that winners have more aces than losers. 

d. Identify the player(s) with the highest win-rate. (Note that this is NOT asking for the highest number of wins.) Restrict to players with at least 5 matches.
``` {r}
atp_matches %>%
  select(winner_name, loser_name) %>%
  pivot_longer(cols = c("winner_name", "loser_name"),
               names_to = "win",
               values_to = "player") %>%
  mutate(win = (win == "winner_name")*1) %>%
  group_by(player) %>%
  summarise(total_matches = n(),
            win_rate = sum(win) / total_matches * 100) %>%
  filter(total_matches >= 5) %>%
  arrange(-win_rate) %>%
  head()
```
The player with the highest win rate is Rafael Nadal with a win rate of 86.96% and 69 total matches.

## Problem 3

In this first code chunk for problem 3, I load the ggplot2 library and the data. Currently, the "date" variable is a character variable, so I change the it to be of type Date.
``` {r}
library(ggplot2)

us_states <- read.csv("data/us-states.csv")
us_states$date <- as.Date(us_states$date)
```

a. How many major and minor spikes in cases were there?
``` {r fig.width=8, fig.height=6}
us_states_date <- us_states %>%
  group_by(date) %>%
  summarise(total_cases = sum(cases))
  
us_states_week <- us_states %>%
  mutate(week = floor_date(date, "week")) %>%
  group_by(week) %>%
  summarise(cases_week_avg = sum(cases) / 7)

ggplot(us_states_date, aes(x = date, y = total_cases)) +
  geom_point(color="slategray", alpha=0.3) +
  geom_line(data=us_states_week, aes(x = week, y = cases_week_avg, color = cases_week_avg), linewidth = 1.2) +
  scale_color_viridis_c(option = "inferno", direction = -1, name = "Average Cases Per Week") +
  labs(
    title = "Major and Minor COVID-19 Case Spikes in the U.S.",
    x = "Date",
    y = "Total Daily New Cases",
    color = "Average Cases Per Week"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.4),
    legend.position = "bottom",
    legend.title.position = "top",
    legend.key.width = unit(3, "cm")
  )
```
From the plot above, there is one major spike in early 2022. I would consider there to be about 3 or 4 minor spikes, one in late 2020 and its follow-up in early 2021 (this can be debated to be considered an actual spike, and thus causes the confusion between 3 or 4), and then a minor spike in late 2021 before the major spike, and lastly the minor spike in mid-2022.

b. For the states with the highest and lowest overall rates per population, what differences do you see in their trajectories over time?
``` {r}
ggplot(us_states, aes(x = date, y = cases_avg_per_100k, color = state)) +
  geom_line(linewidth = 1, alpha = 0.4, show.legend = FALSE) +
  labs(
    title = "COVID-19 Case Rates by State",
    x = "Date",
    y = "Average Cases Per 100k Residents"
  ) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.4))
```
Based on the graph, we see that states with the highest overall rates per population have much larger spikes compared to those of lower overall rates, for example, the blue spikes seem much higher than that of green. In general, most states do seem to follow a general trajectory, as in, they all seem to spike at the same time; note the big spike in early 2022, where all states (except orange, which was independently identified as American Samoa through other data exploration and thus makes sense for it not to follow the trends of mainland American states) experience the spike in cases. However, we can see differences in the way this spike is experiences, earlier I brought up that a state denoted by blue seemed to experience higher overall rates compared to green and thus, in general, have larger spikes. In this major spike, we also see a similar pattern, with blue having a larger spike compared to green.

c. Identify, to the best of your ability without a formal test, the first five states to experience Covid in a substantial way.
``` {r fig.width=8, fig.height=8}
us_states_start <- us_states %>%
  filter(date > as.Date("2020-03-20"), 
         date < as.Date("2020-04-20"),
         cases_avg_per_100k > 15)

ggplot(us_states_start, aes(x = date, y = cases_avg_per_100k, color=state)) +
  geom_line(linewidth = 1.2) + 
  xlim(as.Date("2020-03-20"), as.Date("2020-04-20")) +
  ylim(15, 60) +
  scale_color_brewer(palette = "Set3") + 
  labs(
    title = "COVID-19 Case Rates by State (Marâ€“Apr 2020)",
    x = "Date",
    y = "Average Cases per 100k",
    color = "State"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.4),
    legend.position = "bottom",
    legend.title.position = "top"
  )
```
Based on the graph, I would identify the first four as New York, New Jersey, Louisiana, and Guam, respectively. The fifth state is more ambiguous, but I would say it is between Connecticut and Massachusetts, as they both experienced their spike at similar times. 

## Attribution of Sources

- Tidy t test: https://infer.netlify.app/reference/t_test.html

- Monthly summary with tidyverse: https://stackoverflow.com/questions/6052631/aggregate-daily-data-to-month-year-intervals

- Viridis colors: https://ggplot2.tidyverse.org/reference/scale_viridis.html